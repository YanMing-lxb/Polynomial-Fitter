"""
 =======================================================================
 ····Y88b···d88P················888b·····d888·d8b·······················
 ·····Y88b·d88P·················8888b···d8888·Y8P·······················
 ······Y88o88P··················88888b·d88888···························
 ·······Y888P··8888b···88888b···888Y88888P888·888·88888b·····d88b·······
 ········888······"88b·888·"88b·888·Y888P·888·888·888·"88b·d88P"88b·····
 ········888···d888888·888··888·888··Y8P··888·888·888··888·888··888·····
 ········888··888··888·888··888·888···"···888·888·888··888·Y88b·888·····
 ········888··"Y888888·888··888·888·······888·888·888··888··"Y88888·····
 ·······························································888·····
 ··························································Y8b·d88P·····
 ···························································"Y88P"······
 =======================================================================

 -----------------------------------------------------------------------
Author       : 焱铭
Date         : 2025-07-24 10:01:40 +0800
LastEditTime : 2025-07-24 10:57:34 +0800
Github       : https://github.com/YanMing-lxb/
FilePath     : /Polynomial-Fitter/src/utils.py
Description  :
 -----------------------------------------------------------------------
"""

import os
import sys


def polynomial_fit(x: float, *coefficients: any):
    """多项式拟合函数

    根据给定的系数计算多项式的值，多项式形式为：
    f(x) = a0 + a1*x + a2*x^2 + ... + an*x^n

    Parameters
    ----------
    x : float or array-like
        自变量值，可以是单个数值或数组
    *coefficients : any
        可变长度的系数参数，按升幂顺序排列
        coefficients[0]为常数项，coefficients[1]为一次项系数，以此类推

    Returns
    -------
    float or array-like
        多项式在给定x值处的计算结果，类型与输入x相同
    """
    """多项式拟合函数"""
    # 使用生成器表达式计算多项式的每一项并求和
    return sum(coefficient * pow(x, i) for i, coefficient in enumerate(coefficients))


def folder_path(folder_name: str, filename: str) -> str:
    """根据应用程序运行模式构建文件路径

    该函数会根据程序是打包运行还是开发模式运行，自动选择正确的基础路径，
    并构建包含指定文件夹和文件名的完整路径。

    Parameters
    ----------
    folder_name : str
        目标文件夹名称
    filename : str
        目标文件名称

    Returns
    -------
    str
        完整的文件路径字符串
    """
    if getattr(sys, "frozen", False):  # 打包后
        # 获取打包后的基础路径
        base_path = sys._MEIPASS
        # 构建打包环境下的文件路径
        assets_path = os.path.join(base_path, folder_name, filename)
    else:  # 开发模式下，基于 __main__.py 的位置向上找根目录
        # 获取开发环境下的基础路径
        base_path = os.path.abspath(".")
        # 构建开发环境下的文件路径，通过src目录
        assets_path = os.path.join(base_path, "src", folder_name, filename)
    return assets_path
